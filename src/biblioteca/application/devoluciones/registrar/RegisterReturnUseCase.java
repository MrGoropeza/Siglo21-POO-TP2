package biblioteca.application.devoluciones.registrar;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

import biblioteca.data.database.FineRepository;
import biblioteca.data.database.LoanRepository;
import biblioteca.data.database.SystemParametersRepository;
import biblioteca.data.database.CopyRepository;
import biblioteca.domain.entities.Copy;
import biblioteca.domain.entities.Fine;
import biblioteca.domain.entities.Loan;
import biblioteca.domain.entities.SystemParameters;
import biblioteca.domain.enums.LoanState;

/**
 * Use case for registering book returns
 * Handles return processing, fine calculation, and state updates
 */
public class RegisterReturnUseCase {
    private final LoanRepository loanRepository;
    private final CopyRepository copyRepository;
    private final FineRepository fineRepository;
    private final SystemParametersRepository systemParametersRepository;

    public RegisterReturnUseCase(
            LoanRepository loanRepository,
            CopyRepository copyRepository,
            FineRepository fineRepository,
            SystemParametersRepository systemParametersRepository) {
        this.loanRepository = loanRepository;
        this.copyRepository = copyRepository;
        this.fineRepository = fineRepository;
        this.systemParametersRepository = systemParametersRepository;
    }

    /**
     * Process a book return
     * 
     * @param request Contains the copy code being returned
     * @return Result with success status, message, and fine if applicable
     */
    public RegisterReturnResult execute(RegisterReturnRequest request) {
        // 1. Find the copy
        Copy copy = copyRepository.findByCode(request.getCopyCode());
        if (copy == null) {
            return new RegisterReturnResult(false,
                    "No se encontró ejemplar con código: " + request.getCopyCode());
        }

        // 2. Find active loan for this copy
        Loan activeLoan = loanRepository.findActiveLoanByCopy(copy);
        if (activeLoan == null) {
            return new RegisterReturnResult(false,
                    "No se encontró préstamo activo para el ejemplar: " + request.getCopyCode());
        }

        // 3. Calculate delay days
        LocalDate today = LocalDate.now();
        long delayDays = ChronoUnit.DAYS.between(activeLoan.getDueDate(), today);

        // 4. Create fine if there's a delay
        Fine fine = null;
        if (delayDays > 0) {
            fine = calculateFine(activeLoan, delayDays);
            fineRepository.save(fine);
        }

        // 5. Update copy state to AVAILABLE
        copy.markAsAvailable();
        copyRepository.update(copy);

        // 6. Update loan state to RETURNED with return date
        activeLoan.setReturnDate(today);
        activeLoan.setState(LoanState.RETURNED);
        loanRepository.save(activeLoan);

        // 7. Build result message
        String message = buildReturnMessage(activeLoan, delayDays, fine);

        return new RegisterReturnResult(true, message, fine);
    }

    /**
     * Preview return information without processing
     * Used by forms to show information before confirmation
     */
    public RegisterReturnResult previewReturn(String copyCode) {
        Copy copy = copyRepository.findByCode(copyCode);
        if (copy == null) {
            return new RegisterReturnResult(false,
                    "No se encontró ejemplar con código: " + copyCode);
        }

        Loan activeLoan = loanRepository.findActiveLoanByCopy(copy);
        if (activeLoan == null) {
            return new RegisterReturnResult(false,
                    "No se encontró préstamo activo para el ejemplar: " + copyCode);
        }

        // Calculate preview
        LocalDate today = LocalDate.now();
        long delayDays = ChronoUnit.DAYS.between(activeLoan.getDueDate(), today);

        Fine previewFine = null;
        if (delayDays > 0) {
            previewFine = calculateFine(activeLoan, delayDays);
        }

        String previewMessage = buildPreviewMessage(activeLoan, delayDays, previewFine);

        return new RegisterReturnResult(true, previewMessage, previewFine);
    }

    /**
     * Calculate fine based on delay days and member type benefits
     */
    private Fine calculateFine(Loan loan, long delayDays) {
        SystemParameters params = systemParametersRepository.get();
        double baseAmount = delayDays * params.getFinePerDay();

        // Apply member type discount
        double finalAmount = loan.getMember().calculateFineAmount(baseAmount);

        Fine fine = new Fine(
                null, // ID will be generated by repository
                loan.getMember(),
                finalAmount,
                LocalDate.now());

        return fine;
    }

    /**
     * Build detailed return message
     */
    private String buildReturnMessage(Loan loan, long delayDays, Fine fine) {
        StringBuilder message = new StringBuilder();
        message.append(String.format("Devolución registrada exitosamente%n"));
        message.append(String.format("Libro: %s%n", loan.getCopy().getBook().getTitle()));
        message.append(String.format("Ejemplar: %s%n", loan.getCopy().getCode()));
        message.append(String.format("Fecha de vencimiento: %s%n", loan.getDueDate()));
        message.append(String.format("Fecha de devolución: %s%n", loan.getReturnDate()));

        if (delayDays > 0) {
            message.append(String.format("%nDías de retraso: %d%n", delayDays));
            message.append(String.format("Multa generada: $%.2f%n", fine.getAmount()));

            // Show discount if applicable
            double discountPercentage = loan.getMember().getType().getFineDiscountPercentage();
            if (discountPercentage > 0) {
                message.append(String.format("(Descuento %s aplicado: %.0f%%)%n",
                        loan.getMember().getType().getDisplayName(),
                        discountPercentage));
            }
        } else {
            message.append(String.format("%nDevolución a tiempo - Sin multa"));
        }

        return message.toString();
    }

    /**
     * Build preview message for return (before confirmation)
     */
    private String buildPreviewMessage(Loan loan, long delayDays, Fine fine) {
        StringBuilder message = new StringBuilder();
        message.append(String.format("Préstamo activo encontrado%n"));
        message.append(String.format("Socio: %s (%s)%n", loan.getMember().getName(),
                loan.getMember().getType().getDisplayName()));
        message.append(String.format("Libro: %s%n", loan.getCopy().getBook().getTitle()));
        message.append(String.format("Ejemplar: %s%n", loan.getCopy().getCode()));
        message.append(String.format("Fecha de préstamo: %s%n", loan.getLoanDate()));
        message.append(String.format("Fecha de vencimiento: %s%n", loan.getDueDate()));
        message.append(String.format("Fecha de devolución: %s (hoy)%n", LocalDate.now()));

        if (delayDays > 0) {
            message.append(String.format("%n⚠️  Devolución con retraso%n"));
            message.append(String.format("Días de retraso: %d%n", delayDays));
            message.append(String.format("Multa a generar: $%.2f%n", fine.getAmount()));

            // Show discount if applicable
            double discountPercentage = loan.getMember().getType().getFineDiscountPercentage();
            if (discountPercentage > 0) {
                message.append(String.format("(Descuento %s: %.0f%%)%n",
                        loan.getMember().getType().getDisplayName(),
                        discountPercentage));
            }
        } else {
            message.append(String.format("%n✓ Devolución a tiempo - No se generará multa"));
        }

        return message.toString();
    }
}
